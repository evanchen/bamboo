// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcLog.proto

package rpcpto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogInfo struct {
	Path    string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *LogInfo) Reset()                    { *m = LogInfo{} }
func (m *LogInfo) String() string            { return proto.CompactTextString(m) }
func (*LogInfo) ProtoMessage()               {}
func (*LogInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *LogInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *LogInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type RetSend struct {
	Ret int32 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
}

func (m *RetSend) Reset()                    { *m = RetSend{} }
func (m *RetSend) String() string            { return proto.CompactTextString(m) }
func (*RetSend) ProtoMessage()               {}
func (*RetSend) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RetSend) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func init() {
	proto.RegisterType((*LogInfo)(nil), "rpcpto.LogInfo")
	proto.RegisterType((*RetSend)(nil), "rpcpto.RetSend")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpcLog service

type RpcLogClient interface {
	SendLog(ctx context.Context, opts ...grpc.CallOption) (RpcLog_SendLogClient, error)
}

type rpcLogClient struct {
	cc *grpc.ClientConn
}

func NewRpcLogClient(cc *grpc.ClientConn) RpcLogClient {
	return &rpcLogClient{cc}
}

func (c *rpcLogClient) SendLog(ctx context.Context, opts ...grpc.CallOption) (RpcLog_SendLogClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RpcLog_serviceDesc.Streams[0], c.cc, "/rpcpto.RpcLog/SendLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcLogSendLogClient{stream}
	return x, nil
}

type RpcLog_SendLogClient interface {
	Send(*LogInfo) error
	CloseAndRecv() (*RetSend, error)
	grpc.ClientStream
}

type rpcLogSendLogClient struct {
	grpc.ClientStream
}

func (x *rpcLogSendLogClient) Send(m *LogInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcLogSendLogClient) CloseAndRecv() (*RetSend, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RetSend)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RpcLog service

type RpcLogServer interface {
	SendLog(RpcLog_SendLogServer) error
}

func RegisterRpcLogServer(s *grpc.Server, srv RpcLogServer) {
	s.RegisterService(&_RpcLog_serviceDesc, srv)
}

func _RpcLog_SendLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcLogServer).SendLog(&rpcLogSendLogServer{stream})
}

type RpcLog_SendLogServer interface {
	SendAndClose(*RetSend) error
	Recv() (*LogInfo, error)
	grpc.ServerStream
}

type rpcLogSendLogServer struct {
	grpc.ServerStream
}

func (x *rpcLogSendLogServer) SendAndClose(m *RetSend) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcLogSendLogServer) Recv() (*LogInfo, error) {
	m := new(LogInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RpcLog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpto.RpcLog",
	HandlerType: (*RpcLogServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendLog",
			Handler:       _RpcLog_SendLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpcLog.proto",
}

func init() { proto.RegisterFile("rpcLog.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2a, 0x48, 0xf6,
	0xc9, 0x4f, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x2a, 0x48, 0x2e, 0x28, 0xc9,
	0x57, 0x32, 0xe7, 0x62, 0xf7, 0xc9, 0x4f, 0xf7, 0xcc, 0x4b, 0xcb, 0x17, 0x12, 0xe2, 0x62, 0x29,
	0x48, 0x2c, 0xc9, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x24, 0xb8, 0xd8,
	0x93, 0xf3, 0xf3, 0x4a, 0x52, 0xf3, 0x4a, 0x24, 0x98, 0xc0, 0xc2, 0x30, 0xae, 0x92, 0x34, 0x17,
	0x7b, 0x50, 0x6a, 0x49, 0x70, 0x6a, 0x5e, 0x8a, 0x90, 0x00, 0x17, 0x73, 0x51, 0x6a, 0x09, 0x58,
	0x1f, 0x6b, 0x10, 0x88, 0x69, 0x64, 0xc9, 0xc5, 0x16, 0x04, 0xb6, 0x4d, 0x48, 0x9f, 0x8b, 0x1d,
	0xa4, 0x06, 0xc4, 0xe4, 0xd7, 0x83, 0xd8, 0xa9, 0x07, 0xb5, 0x50, 0x0a, 0x2e, 0x00, 0x35, 0x48,
	0x89, 0x41, 0x83, 0x31, 0x89, 0x0d, 0xec, 0x3e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9,
	0x23, 0xd3, 0x35, 0xaf, 0x00, 0x00, 0x00,
}
