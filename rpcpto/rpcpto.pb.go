// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcpto.proto

/*
Package rpcpto is a generated protocol buffer package.

It is generated from these files:
	rpcpto.proto

It has these top-level messages:
	ReqParams
	RetParams
*/
package rpcpto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqParams struct {
	PInts []int64  `protobuf:"varint,1,rep,packed,name=PInts" json:"PInts,omitempty"`
	PStrs []string `protobuf:"bytes,2,rep,name=PStrs" json:"PStrs,omitempty"`
}

func (m *ReqParams) Reset()                    { *m = ReqParams{} }
func (m *ReqParams) String() string            { return proto.CompactTextString(m) }
func (*ReqParams) ProtoMessage()               {}
func (*ReqParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqParams) GetPInts() []int64 {
	if m != nil {
		return m.PInts
	}
	return nil
}

func (m *ReqParams) GetPStrs() []string {
	if m != nil {
		return m.PStrs
	}
	return nil
}

type RetParams struct {
	Result int32    `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty"`
	PInts  []int64  `protobuf:"varint,2,rep,packed,name=PInts" json:"PInts,omitempty"`
	PStrs  []string `protobuf:"bytes,3,rep,name=PStrs" json:"PStrs,omitempty"`
}

func (m *RetParams) Reset()                    { *m = RetParams{} }
func (m *RetParams) String() string            { return proto.CompactTextString(m) }
func (*RetParams) ProtoMessage()               {}
func (*RetParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RetParams) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *RetParams) GetPInts() []int64 {
	if m != nil {
		return m.PInts
	}
	return nil
}

func (m *RetParams) GetPStrs() []string {
	if m != nil {
		return m.PStrs
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqParams)(nil), "rpcpto.ReqParams")
	proto.RegisterType((*RetParams)(nil), "rpcpto.RetParams")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpcRoute service

type RpcRouteClient interface {
	ProcStart(ctx context.Context, in *ReqParams, opts ...grpc.CallOption) (*RetParams, error)
	GetInfo(ctx context.Context, in *ReqParams, opts ...grpc.CallOption) (*RetParams, error)
}

type rpcRouteClient struct {
	cc *grpc.ClientConn
}

func NewRpcRouteClient(cc *grpc.ClientConn) RpcRouteClient {
	return &rpcRouteClient{cc}
}

func (c *rpcRouteClient) ProcStart(ctx context.Context, in *ReqParams, opts ...grpc.CallOption) (*RetParams, error) {
	out := new(RetParams)
	err := grpc.Invoke(ctx, "/rpcpto.RpcRoute/ProcStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcRouteClient) GetInfo(ctx context.Context, in *ReqParams, opts ...grpc.CallOption) (*RetParams, error) {
	out := new(RetParams)
	err := grpc.Invoke(ctx, "/rpcpto.RpcRoute/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcRoute service

type RpcRouteServer interface {
	ProcStart(context.Context, *ReqParams) (*RetParams, error)
	GetInfo(context.Context, *ReqParams) (*RetParams, error)
}

func RegisterRpcRouteServer(s *grpc.Server, srv RpcRouteServer) {
	s.RegisterService(&_RpcRoute_serviceDesc, srv)
}

func _RpcRoute_ProcStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcRouteServer).ProcStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpto.RpcRoute/ProcStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcRouteServer).ProcStart(ctx, req.(*ReqParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcRoute_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcRouteServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpto.RpcRoute/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcRouteServer).GetInfo(ctx, req.(*ReqParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcRoute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpto.RpcRoute",
	HandlerType: (*RpcRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcStart",
			Handler:    _RpcRoute_ProcStart_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _RpcRoute_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcpto.proto",
}

func init() { proto.RegisterFile("rpcpto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2a, 0x48, 0x2e,
	0x28, 0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xcc, 0xb9, 0x38,
	0x83, 0x52, 0x0b, 0x03, 0x12, 0x8b, 0x12, 0x73, 0x8b, 0x85, 0x44, 0xb8, 0x58, 0x03, 0x3c, 0xf3,
	0x4a, 0x8a, 0x25, 0x18, 0x15, 0x98, 0x35, 0x98, 0x83, 0x20, 0x1c, 0xb0, 0x68, 0x70, 0x49, 0x51,
	0xb1, 0x04, 0x93, 0x02, 0xb3, 0x06, 0x67, 0x10, 0x84, 0xa3, 0xe4, 0x0f, 0xd2, 0x58, 0x02, 0xd5,
	0x28, 0xc6, 0xc5, 0x16, 0x94, 0x5a, 0x5c, 0x9a, 0x53, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1a,
	0x04, 0xe5, 0x21, 0x0c, 0x64, 0xc2, 0x6a, 0x20, 0x33, 0x92, 0x81, 0x46, 0x45, 0x5c, 0x1c, 0x41,
	0x05, 0xc9, 0x41, 0xf9, 0xa5, 0x25, 0xa9, 0x42, 0xc6, 0x5c, 0x9c, 0x01, 0x45, 0xf9, 0xc9, 0xc1,
	0x25, 0x89, 0x45, 0x25, 0x42, 0x82, 0x7a, 0x50, 0x97, 0xc3, 0x1d, 0x2a, 0x85, 0x24, 0x04, 0x75,
	0x82, 0x12, 0x83, 0x90, 0x21, 0x17, 0xbb, 0x7b, 0x6a, 0x89, 0x67, 0x5e, 0x5a, 0x3e, 0xb1, 0x5a,
	0x92, 0xd8, 0xc0, 0x81, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x9b, 0x1e, 0x87, 0x1c,
	0x01, 0x00, 0x00,
}
