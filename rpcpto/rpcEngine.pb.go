// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcEngine.proto

/*
Package rpcpto is a generated protocol buffer package.

It is generated from these files:
	rpcEngine.proto

It has these top-level messages:
	ReqRegister
	RetRegister
*/
package rpcpto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqRegister struct {
	GsId int32 `protobuf:"varint,1,opt,name=gsId" json:"gsId,omitempty"`
}

func (m *ReqRegister) Reset()                    { *m = ReqRegister{} }
func (m *ReqRegister) String() string            { return proto.CompactTextString(m) }
func (*ReqRegister) ProtoMessage()               {}
func (*ReqRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqRegister) GetGsId() int32 {
	if m != nil {
		return m.GsId
	}
	return 0
}

type RetRegister struct {
	Ret int32 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
}

func (m *RetRegister) Reset()                    { *m = RetRegister{} }
func (m *RetRegister) String() string            { return proto.CompactTextString(m) }
func (*RetRegister) ProtoMessage()               {}
func (*RetRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RetRegister) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqRegister)(nil), "rpcpto.ReqRegister")
	proto.RegisterType((*RetRegister)(nil), "rpcpto.RetRegister")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpcEngine service

type RpcEngineClient interface {
	RegisterEngine(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*RetRegister, error)
}

type rpcEngineClient struct {
	cc *grpc.ClientConn
}

func NewRpcEngineClient(cc *grpc.ClientConn) RpcEngineClient {
	return &rpcEngineClient{cc}
}

func (c *rpcEngineClient) RegisterEngine(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*RetRegister, error) {
	out := new(RetRegister)
	err := grpc.Invoke(ctx, "/rpcpto.RpcEngine/RegisterEngine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcEngine service

type RpcEngineServer interface {
	RegisterEngine(context.Context, *ReqRegister) (*RetRegister, error)
}

func RegisterRpcEngineServer(s *grpc.Server, srv RpcEngineServer) {
	s.RegisterService(&_RpcEngine_serviceDesc, srv)
}

func _RpcEngine_RegisterEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcEngineServer).RegisterEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpto.RpcEngine/RegisterEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcEngineServer).RegisterEngine(ctx, req.(*ReqRegister))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpto.RpcEngine",
	HandlerType: (*RpcEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEngine",
			Handler:    _RpcEngine_RegisterEngine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcEngine.proto",
}

func init() { proto.RegisterFile("rpcEngine.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x2a, 0x48, 0x76,
	0xcd, 0x4b, 0xcf, 0xcc, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x2a, 0x48,
	0x2e, 0x28, 0xc9, 0x57, 0x52, 0xe4, 0xe2, 0x0e, 0x4a, 0x2d, 0x0c, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e,
	0x49, 0x2d, 0x12, 0x12, 0xe2, 0x62, 0x49, 0x2f, 0xf6, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60,
	0x0d, 0x02, 0xb3, 0x95, 0xe4, 0x41, 0x4a, 0x4a, 0xe0, 0x4a, 0x04, 0xb8, 0x98, 0x8b, 0x52, 0x4b,
	0xa0, 0x2a, 0x40, 0x4c, 0x23, 0x4f, 0x2e, 0xce, 0x20, 0x98, 0xf1, 0x42, 0x36, 0x5c, 0x7c, 0x30,
	0xa5, 0x50, 0x11, 0x61, 0x3d, 0x88, 0x5d, 0x7a, 0x48, 0x16, 0x49, 0x21, 0x09, 0xc2, 0x8d, 0x56,
	0x62, 0x48, 0x62, 0x03, 0xbb, 0xce, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x6e, 0x66, 0xdc,
	0xb0, 0x00, 0x00, 0x00,
}
